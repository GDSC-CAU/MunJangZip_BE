name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  # 1. Docker 이미지를 빌드하고 Docker Hub에 푸시하는 작업
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      # 1.1 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 1.2 Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 1.3 Gradle 실행 파일 권한 추가
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      # 1.4 Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew clean bootJar

      # 1.5 Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/gdg-project:latest .

      # 1.6 Docker Hub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 1.7 Docker Hub에 이미지 푸시
      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/gdg-project:latest

  # 2. AWS EC2 서버에 Docker 이미지를 배포하는 작업
  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      # 2.1 EC2 서버로 SSH 연결 및 배포
      - name: SSH to EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            echo "✅ Stopping and removing old container..."
            sudo docker stop gdg-container || true
            sudo docker rm gdg-container || true

            echo "✅ Pulling latest Docker image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/gdg-project:latest

            echo "✅ Running new Docker container..."
            sudo docker run -d --name gdg-container -p 8080:8080 \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              -e JWT_ACCESS_TOKEN_TIME="${{ secrets.JWT_ACCESS_TOKEN_TIME }}" \
              -e JWT_REFRESH_TOKEN_TIME="${{ secrets.JWT_REFRESH_TOKEN_TIME }}" \
              -e RDS_NAME="${{ secrets.RDS_NAME }}" \
              -e RDS_PW="${{ secrets.RDS_PW }}" \
              ${{ secrets.DOCKER_USERNAME }}/gdg-project:latest
